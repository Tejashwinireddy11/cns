def generate_key_matrix(key):
    key = key.upper().replace("J", "I")
    matrix = []
    used = set()

    for c in key:
        if c not in used and c.isalpha():
            used.add(c)
            matrix.append(c)

    for c in "ABCDEFGHIKLMNOPQRSTUVWXYZ":
        if c not in used:
            used.add(c)
            matrix.append(c)

    return [matrix[i:i+5] for i in range(0, 25, 5)]


def find_position(matrix, letter):
    for i, row in enumerate(matrix):
        if letter in row:
            return i, row.index(letter)
    return None


def playfair_encrypt(plaintext, key):
    matrix = generate_key_matrix(key)
    plaintext = plaintext.upper().replace("J", "I")
    plaintext = "".join([c for c in plaintext if c.isalpha()])

    # Make pairs
    i = 0
    pairs = []
    while i < len(plaintext):
        a = plaintext[i]
        b = plaintext[i+1] if i+1 < len(plaintext) else 'X'
        if a == b:
            b = 'X'
            i += 1
        else:
            i += 2
        pairs.append((a, b))

    ciphertext = ""
    for a, b in pairs:
        r1, c1 = find_position(matrix, a)
        r2, c2 = find_position(matrix, b)

        if r1 == r2:  # same row
            ciphertext += matrix[r1][(c1 + 1) % 5]
            ciphertext += matrix[r2][(c2 + 1) % 5]
        elif c1 == c2:  # same column
            ciphertext += matrix[(r1 + 1) % 5][c1]
            ciphertext += matrix[(r2 + 1) % 5][c2]
        else:  # rectangle swap
            ciphertext += matrix[r1][c2]
            ciphertext += matrix[r2][c1]

    return ciphertext


def playfair_decrypt(ciphertext, key):
    matrix = generate_key_matrix(key)
    plaintext = ""
    i = 0
    while i < len(ciphertext):
        a = ciphertext[i]
        b = ciphertext[i+1]
        r1, c1 = find_position(matrix, a)
        r2, c2 = find_position(matrix, b)

        if r1 == r2:
            plaintext += matrix[r1][(c1 - 1) % 5]
            plaintext += matrix[r2][(c2 - 1) % 5]
        elif c1 == c2:
            plaintext += matrix[(r1 - 1) % 5][c1]
            plaintext += matrix[(r2 - 1) % 5][c2]
        else:
            plaintext += matrix[r1][c2]
            plaintext += matrix[r2][c1]
        i += 2

    return plaintext


# Example
key = "MONARCHY"
plaintext = "INSTRUMENTS"

cipher = playfair_encrypt(plaintext, key)
print("Ciphertext:", cipher)

decrypted = playfair_decrypt(cipher, key)
print("Decrypted:", decrypted)
